export class commonHelp {
  htmlDataHelp =
    "<h4>Overview</h4><p>A watch list is a tabular set of points that you wish to view all at once. Point values and value times update automatically&mdash;you do not need to refresh the page. (In fact, the system operates more efficiently if you don't.) </p> <h4> Named watch lists </h4> <p> A user may have multiple watch lists, but may only view one at a time. To create a new watch list, click the <span class='fa fa-eye ptr fa-lg text-info'> </span> icon in the top right-hand corner of the watch list section. New watchlist page will get popup in the screen, can set the watchlist name and beneath it their is the sharing option, select the user from the drop down box and click the <span class='fa fa-plus text-info'></span> icon. Then, choose the access type that the user should have, either 'read' (not allowed to set points) or 'set' (allowed to set points). Add as many shares to the watch list as required. Two sections are present, unselected points and selected points. From this section, can able to select the required points to be shown in the watchlist page by clicking on the (<span class='fa fa-fw fa-long-arrow-right text-success ptr'></span>) icon from the unselected points section and can unselect the point by clicking on the (<span class='fa fa-fw fa-long-arrow-right text-success ptr'></span>) icon from the selected section. Search bar is present at the right top corner of the unselected Points section to search the required points. New watch lists are named '(unnamed)' by default. To rename it, hover over the <span class='fa fa-pencil ptr fa-lg text-info'></span> icon to expose the name editing panel, enter the new name, and press Enter or click 'Save' to save. To delete a watch list, click the <span class='fa fa-trash fa-lg text-danger ptr'></span> icon in the top right-hand corner of the watch list section. Each user must have at least one watch list, so the delete icon only appears if there is currently more than one.</p> <h4> Points in watch lists </h4> <p> A point can belong to multiple watch lists, so you can create lists that are as specific as you require.</p> <p> The data shown for each point in your list depends upon that point's configuration. Points that are settable (and for which you have permission to set) will show a set icon (<img src='images/icon_edit.png'>). Hovering your mouse over this icon will present options for setting the point. Points that are configured for charting will show a chart icon (<span class='fa fa-line-chart'></span>). Hovering over this icon will present the current chart. Charts are updated automatically, like values and times, so when new data is available the chart will update itself. The point details icon (<span class='fa fa-cubes text-info ptr margin-right-5'></span>) will take you to the point details page for the selected point.</p> <p> To re-order the points in your list, use the <em>move</em>icons. Clicking<span class='fa fa-arrow-down text-success ptr margin-right-5'></span>will move the point one row down in the list, while clicking<span class='fa fa-arrow-up text-success ptr margin-right-5'></span>will move it one row up.</p><p>To add points to your current list, click the point name in the <em>Points </em>section. They will be appended to the bottom of the list. To remove points, click the remove icon (<span class='fa fa-minus-circle text-danger ptr margin-right-5'></span>) at the right-hand side of the point row. Clicking this icon only removes the point from your current watch list&mdash;it does not delete the point from the system. Do not confuse the <em>remove point</em>icon with the <em> delete watch list</em> icon at the top of the page.</p> <h4>Highlighting</h4> <p>Watch list values and times will briefly highlight when they change. Highlighting remains until the next refresh cycle completes. Times will typically highlight more than values since point updates always involve a time change, but not necessarily a value change.</p>";
  htmlDataSource =
    "<p>The <b>data source list</b>lists all data sources defined in the system, displaying in the cards form.<b> Connection</b> attributes are configuration values that depend on the data source type.The <i class='toggle on green icon'></i> <b>icon</b> on the card determines that the data source is enabled and the <i class='toggle on red icon'></i><b> icon</b> determines that the data source is disabled. Clicking on the <i class='toggle on icon'></i><b> icon</b> toggles the data source's status.</p><p>To add a new data source, click on the bottom right side <i class='plus inverted teal circle icon'></i> <b>icon</b>. Popup will appear, then select the data source type from the list and click the <i class='plus teal circle icon'></i><b> icon</b> at the right side of the select list option.</p><b></b><p>To edit an existing data source, click the <i class='edit icon'></i> <b> icon</b> on the card associated with the datasource. To delete a data source, click the <i class='red trash icon'></i><b> icon</b> on the card associated with the data source. Depending upon the amount of data stored for the data source it may take a significant amount of time to delete; be sure to let the delete process finish before continuing. To copy a data source, click the <i class='copy icon'></i> <b>icon</b> on the card associated with the data source.</p> <p>The <i class='server icon'></i>icons on the card will display a modal of the points defined for the data source. Similar to data sources, points can be enabled <i class='toggle on green icon'></i> or disabled <i class='toggle on red icon'></i>here.</p>";
  htmlEmailInformation =
    "<p>Email settings are used for all emailing activities with in the application instance.</p><p> <b> SMTP host </b> is the name of the host where your MTA is running. If your host requires authentication, check the <b>Use authorization</b>box, and fill in the <b>Username </b> and <b> Password </b> fields. Check the <b>Enable TLS </b> checkbox if your server requires it.</p> <p> The <b>'From' address </b>is the address that will be used as the from address on each email. The <b>'From' name </b> is an optional field with which to specify an alias&mdash;or 'personal' name&mdash;to display as the email sender.</p> <p> Use the <b> Content type </b> select box to choose the type of content you wish to have in the InFix emails. By default <b> HTML and text </b> is selected, which causes InFix to create a multi-part MIME email with both \"text/html\" and \"text/text\" parts. If <b> HTML only </b> is chosen the email may still be a multi-part if there are attachments or in-line content, but will be otherwise be single part. If <b>Text only </b> is chosen, the email will always be a simple single part.<b> Note: </b> scheduled report emails are always sent as HTML-only due to the content they include.</p><p> When you are finished with your email settings, you can test them by clicking the <i class=\"envelope outline blue icon\"></i> icon. This will attempt to send an email to your email address using the settings you have entered.</p>";
  htmlPermissionHelp =
    "<p>Permissions are a comma-delimited list of virtual \"group\" names that grants the associated permission.</p><b></b><ul><li><strong> Edit permission </strong> allows the user to modify the asset with edit, view and access permission.</li><li> <strong> Read permission </strong> allows the user to view and access the asset in a non-modifiable way.</li><li><strong> Set permission </strong> Set permission allows the user to modify the asset.</li></ul><p><strong> Apply Edit Permission to a Single Datasource </strong></p><p> Permission page allows you to apply edit permission to a datasource. To apply the edit permission, select the particular datasource, it will activate the <strong> Apply permission </strong> button positioned at the top right corner and then select the permission group/groups and click on the <strong> Apply permission </strong> button</p><p><strong> Apply Edit Permission to Multiple Datasources </strong></p><p> Permission page allows you to apply edit permission to multiple datasource. To apply the edit permission, select the multiple datasource, it will activate the <strong> Apply permission </strong> button positioned at the top right corner and then select the permission group/groups and click on the <strong> Apply permission </strong>button</p><p><strong> Apply Read Permission to DataPoint/DataPoints </strong></p> <p> Permission page allows you to apply read permission to the datapoint/datapoints. Click on the datapoint icon of that particular datasource from the table you want to apply for permission. Sidebar will open, it will display all the datapoint present inside that datasource, So now you can select datapoint/datapoints from the list. After selecting datapoint/datapoints it will activate the save button. Select the read permission's group/groups and then click on the <strong> save </strong> button.</p><p><strong> Apply Set Permission to DataPoint/DataPoints </strong></p><p> Permission page allows you to apply set permission to the datapoint/datapoints. Click on the datapoint icon of that particular datasource from the table you want to apply for permission. Sidebar will open, it will display all the datapoint present inside that datasource, So now you can select datapoint/datapoints from the list. After selecting datapoint/datapoints it will activate the save button. Select the set permission's group/groups and then click on the <strong> save </strong> button.</p><p><strong>Note:-</strong></p> <p> It is allowed to apply read and set permission to only those datapoints, which datasource doesn't have the edit permission</p>";
    // "<p>Permissions are a comma-delimited list of virtual \"group\" names that grants the associated permission.</p><b></b><ul><li><strong> Edit permission </strong> allows the user to modify the asset with edit, view and access permission.</li><li> <strong> Read permission </strong> allows the user to view and access the asset in a non-modifiable way.</li><li><strong> Set permission </strong> Set permission allows the user to modify the asset.</li></ul><p><strong> Apply Edit Permission to a Single Datasource </strong></p><p> Permission page allows you to apply edit permission to a datasource. To apply the edit permission, select the particular datasource, it will activate the <strong> Apply permission </strong> button positioned at the top right corner and then select the permission group/groups and click on the <strong> Apply permission </strong> button</p><p><strong> Apply Edit Permission to Multiple Datasources </strong></p><p> Permission page allows you to apply edit permission to multiple datasource. To apply the edit permission, select the multiple datasource, it will activate the <strong> Apply permission </strong> button positioned at the top right corner and then select the permission group/groups and click on the <strong> Apply permission </strong>button</p><p><strong> Apply Read Permission to DataPoint/DataPoints </strong></p> <p> Permission page allows you to apply read permission to the datapoint/datapoints. Click on the datapoint icon of that particular datasource from the table you want to apply for permission. Sidebar will open, it will display all the datapoint present inside that datasource, So now you can select datapoint/datapoints from the list. After selecting datapoint/datapoints it will activate the save button. Select the read permission's group/groups and then click on the <strong> save </strong> button.</p><p><strong> Apply Set Permission to DataPoint/DataPoints </strong></p><p> Permission page allows you to apply set permission to the datapoint/datapoints. Click on the datapoint icon of that particular datasource from the table you want to apply for permission. Sidebar will open, it will display all the datapoint present inside that datasource, So now you can select datapoint/datapoints from the list. After selecting datapoint/datapoints it will activate the save button. Select the set permission's group/groups and then click on the <strong> save </strong> button.</p><p><strong>Note:-</strong></p> <p> It is allowed to apply read and set permission to only those datapoints, which datasource doesn't have the edit permission</p>";
  HtmlPublisherList =
    '<p>The<b>publisher list</b>lists all publishers defined in the system, displaying in the cards form.<b>Configuration</b>depend on the publisher type. The<i class="toggle on green icon"></i><b>icon</b>in the card determines that the publisher is enabled and the<i class="toggle on red icon"></i><b>icon</b>determines that the publisher is disabled. Clicking on the<i class="toggle on icon"></i><b>icon</b>toggles the publisher\'s status.</p><b></b><p>To add a new publisher, click on the bottom right side<i class="plus inverted teal circle icon"></i><b>icon</b>. Popup will appear, then select the publisher type from the list and click the<i class="plus teal circle icon"></i><b>icon</b>at the right side of the select list option.</p><b></b><p>To edit an existing publisher, click the<i class="edit icon"></i><b>icon</b>associated with the publisher card. To delete a publisher, click the<i class="red trash icon"></i><b>icon</b>associated with the publisher card.</p>';
  HtmlAlertHelp =
    '<p>The alertList lists all alerts defined in the system, displaying in the cards form. To <b> add</b> a new alert, click on the bottom right side corner <i class="circular small inverted teal plus icon pointer"></i> icon. Side bar will appear, fill all the required fields and click on <b>save</b> button. To <b>Edit</b> an existing alert , click on <i class="small circular inverted edit-icon edit icon pointer"></i> icon, displaying in the card. Side bar will appear, update all the required fields and click on <b>update</b> button. To <b>Delete</b> an existing alert, click on <i class="small circular red trash icon pointer"></i> icon, displaying in the card.</p> <h3> Alert Setup</h3> <p> Configuration of alert divided in to three tab sections.</p><p> <b>Basic</b> tab section contain basic information of the alert. <b> Export Id</b>is non editable. <b> Name</b> field is to provide the alert name. <b>Read permission</b> is to provide the read permission in group form. <b>Set permission</b> is to provide the set permission in group form.</p><p> <b> Recipients</b> tab section is to manage <b> Recipient Types </b>.<b> Alert Type </b>is to select the different alert type. The <b>Alert list</b> can be added to easily manage the following multiple <b>Recipient Type</b>at once :</p><ul> <li>Alert List</li> <li>Email Address</li> <li>User Email Address</li> <li> Phone Number</li> <li> User Phone Number</li> </ul> <p> If you select Recipient Type as <b>Alert List</b>, select alert from list and click on <i class="circular small teal plus icon pointer"></i>add <b>icon</b>. Multiple alert selection is allowed.</p> <p> If you select Recipient Type as <b>Email Address</b>, enter external address and click on <i class="circular small teal plus icon pointer"></i>add <b>icon </b>. Multiple email address addition is allowed.</p> <p>If you select Recipient Type as <b>User Email Address</b>, select the user from the list, it will take the user\'s address and click on <i class="circular small teal plus icon pointer"> </i> add <b> icon</b>. Multiple user\'s email address selection is allowed.</p> <p> If you select Recipient Type as <b>Phone Number</b>, enter the phone number and click on <i class="circular small teal plus icon pointer"></i> add <b>icon</b>. Multiple phone number addition is allowed.</p> <p>If you select Recipient Type as <b>User Phone Number</b>, select the user from the list , it will take the user\'s phone and click on <i class="circular small teal plus icon pointer"> </i> add <b>icon</b>. Multiple user\'s phone number selection is allowed.</p><p> <b> Schedule</b> tab section contain the time schedule of a week. Select the inactive time for the alert and click on <b> save/update</b>button.';
  HtmlUserAdministrationHelp =
    '<h4>Overview</h4><p><b>Users</b>represent individuals who use the system. Various privileges can be assigned to users to grant them the ability to read and alter data and system behaviour.</p><p>The<b>users list</b>lists all users defined in the system, displaying in the cards form.<p>There are two basic user levels: administrators<i class="grey user outline icon"></i>, and other users<i class="grey users icon"></i>. Administrators have access to all system functionality. Other users have various privileges based upon configuration.</p><h4>Editing users</h4><p>To add a new user, click the<i class="plus inverted teal circle icon"></i>icon. The user will not actually be added until it is successfully saved. To edit an existing user, click the user\'s name in the "Users" list.</p><p>Passwords are not retrievable once they have been saved; they can only be reset by specifying a new password.</p><p>User will add the users in form of group in permission group field to give the access.</p><p>A disabled user is not allowed to log in. To delete a user, click the<i class="red trash icon"></i>icon.</p><h4>User privileges</h4><p>The<b>Administrator</b>checkbox determines if this user is an administrator.</p>';
  HtmlVirtualIDS =
    '<p>The Virtual Data Source is a data source without any connection to an external or physical system. It exists entirely within the system\'s own memory space. The data it produces is either random, or deterministic depending on how you configure the points.</p> <p> Virtual data sources can be useful in a number of ways:</p><ul> <li>A simple way to validate that your system is working</li> <li>It can create predictable data with which to benchmark your real data</li> <li>You can control equipment in more complex ways. For example, if your home lighting is controlled by the system, you could use a random binary point to turn the lights off and on while you are on vacation, creating the impression that you are still home.</li> <li>Anywhere where deterministic or random data is useful</li> </ul> <p>The data source configuration is simple. It requires only a name, and the period of time between each data update. For example, if you choose "2 minutes", then every two minutes the algorithms that change the virtual point values for that data source will be run.</p>';
  HtmlNumberFormatHelp =
    "<p><b> Number formats</b> are used to determine how to display and parse numbers values, converting between internal floating point or integer representations and text. For example, the number 1234.5678 could be formatted as shown, but it may be preferred to be viewed as '1,234.6', or '1 234,567', or '1.2345678E3' depending upon the context and the value's semantics. The same patterns can be used to format a value for display as well as parsing text input into numeric values.</p> <p> Number formatting in InFix is implemented by the DecimalFormat Java class, the details for which can be found <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/text/DecimalFormat.html\" target=\"_blank\">here </a>. Some common patterns are provided below for convenience.</p><ul> <li> <b>#,##0.00</b>Comma separation at thousands. Always displays the first integer digit and two decimal places (rounded).</li> <li> <b>0.000</b> Always displays the first integer digit and three decimal places.</li> <li> <b>0.00;(0.00)</b> Always displays the first integer digit and two decimal places. Displays negative numbers in parentheses.</li> </ul> <p> Formatting may be localized depending upon your Java VM defaults.</p>";
  HtmlDatetimeFormatHelp =
    '<p> <b>Date/time formats</b> are used to determine how to display and parse dates, converting between internal representations and text. Dates can be displayed in many ways, and can provide arbitrary amounts of information depending upon the context and the date\'s semantics. The same patterns can be used to format a value for display as well as parsing text input into numeric values.</p> <p> Date formatting in inFix is implemented by the SimpleDateFormat Java class, the details for which can be found <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html" target="_blank">here</a>. Usage examples can be found therein.</p> <p> Formatting may be localized depending upon your Java VM defaults.</p>';
  HtmlTextRenderers =
    '<h4>Overview</h4> <p> A text renderer\'s purpose is to convert a raw value into a form that is more recognizable and informative to a human user. The ways to render raw values depend upon the data type of value to be rendered. As such, only the renderer types that apply to the current point\'s data type are listed in the <b>Type </b> selection.</p> <h4>Binary</h4> <p>The <b>Binary </b>renderer allows the user to define a text label to represent each of the two binary states (i.e. 0 and 1). Any labels can be provided. Also, a distinctive colour may be defined for each state. Typical examples of labels include off/on, stopped/running, or false/true, but any text can be entered.</p> <p> The <b>Plain </b>renderer is the default binary renderer. Displays the unaltered raw value, i.e. 0 and 1.</p> <h4>Numeric</h4> <p>The <b>Analog </b>renderer allows the user to define a <b>Format </b>used to determine things like the number of decimal places to display, and whether thousands should be delimited. (See the "Number format" documentation). A <b>Suffix </b>can also be added to display the units of the value. Suffixes can contain HTML entities such as &deg; (written as \'&amp;deg;\') for display within HTML pages. See <a href="http://www.w3.org/TR/REC-html40/sgml/entities.html" target="_blank">http://www.w3.org/TR/REC-html40/sgml/entities.html </a>for more information on HTML entities.</p> <p>The <b>Plain </b>renderer is the default numeric renderer. Displays the unaltered raw value.</p> <p> The <b>Range </b>renderer allows the user to define a number <b>Format </b>(see the "Number format" documentation for more information), as well as an arbitrary number of textual values to represent various numeric from/to ranges. Each of these ranges can also be assigned a distinctive colour. The number format is only used if the value does not fall within a defined range. For example, the range "cold", "normal", and "hot" may be defined for a temperature point, with appropriate colours for each.</p> <p>The <b>Time</b> renderer allows the user to define a <b>Format</b> (see the "date/time format" documentation for more information). A typical date format would be "MMM d, yyyy". A typical time would be "HH:mm:ss". Date and time formats can be combined as necessary. A millisecond conversion exponent can also be defined. This is a power of 10 exponent that will be used to convert a given value to the equivalent millisecond value. For example, to convert from seconds use 3, from microseconds use -3. If the value is already in milliseconds, use 0. Time values are assumed to start a 0 on January 1, 1970 at midnight.</p> <h4>Multistate</h4> <p>The <b>Plain</b> renderer is the default multistate renderer. Displays the unaltered raw value.</p> <p>The <b>Multistate</b> renderer allows the user to define an arbitrary number of textual values to represent various point states. Each of these states can also be assigned a distinctive colour. If a state occurs which is not assigned to a label, the raw value is displayed. Typical label sets include on/off/disabled, or off/warm/cool.</p> <h4>Alphanumeric</h4> <p>The <b>Plain</b> renderer is the only alphanumeric renderer. Displays the unaltered raw value, including an optional <b>Suffix</b>.</p>';
  HtmlPointValueLoggingHelp =
    '<p>This gateway supports four types of point value logging</p> <p> <b> When point value changes</b> is the default logging setting. The point value and its time of occurrence is written to the database only if the value of the point actually changes. This setting provides the best compromise of quality of historical information vs storage space efficiency. For Numeric points, a <b>Tolerance</b>, or "deadband", can also be provided; the value will be logged if the absolute value of the difference between the present value and the previous value equals or exceeds the given tolerance.</p> <p>The <b>All data</b> setting causes every point update to be saved to the database. Only use this setting if knowledge of every update is definitely required since a great deal of data can be accumulated very quickly, which over time can cause serious performance degradation.</p> <p>The <b>Do not log</b> setting prevents any historical data for the point from being stored in the database. Please note that chart renderers typically require logged data to function properly. Only use "Do not log" when certain that the value history is not needed.</p> <p>The <b>Interval</b> setting allows the collection of data via the data source to be separated from its logging. Use this when the data source is collecting data very frequently (say, for event detector purposes), but all the data is not required to be logged. The <b>Value type</b> may be chosen with this option. "Instant" means that the current value of the point is logged, while the other options will cause a statistic of the points values over the period to be logged.</p> <p>The <b>When point timestamp changes</b> setting. This is similar in behaviour to the on value change setting, but the timestamp of the sample is compared instead of the value.</p> <p> Value discarding can be set to deal with equipment that can occasionally send errant values. When <b> Discard extreme values</b> is set, the <b>Discard low limit</b> and <b>Discard high limit</b> text boxes are enabled. Values less than the low limit or higher than the high limit are thereafter discarded. Any existing values already stored will remain.</p> <p>The <b>Default cache size</b> is the number of values that will be stored in memory. This setting is especially important when a logging method other than "All data" is used. Values that are stored in memory are collated with those stored to the database when necessary. Setting this value very high may improve system performance (since it may prevent a database query), but caution should be used since memory is consumed by the cache, and out of memory conditions may occur. The "Reset cache" is normally not necessary to use, but may be convenient in cases where manual deletes of point values have been done (say, using the SQL functionality).</p>';
  htmlPurgeHelp =
    "<p>The <b>Purge </b>settings determine how long a point's historical values should be kept in the database. Values can be practically kept as long as necessary, but note that performance degradation may occur if the history for a given point becomes too large. (Actually performance of the system depends strongly upon the host hardware.) The purge process runs automatically every morning at 3:05am local time.</p>";
  HtmlSystemThreadConfiguration = "coming soon";
  globalScriptHelpContent = "coming soon";
  licenseHelpContent = "coming soon";
  HelpDbUtilityInfo = "coming soon";
  HtmlHelpBACNetLocalDevices = "coming soon";
  htmlMetaDataSourceHelp =
    "<h4>Inferrixstack JavaScript</h4><br><p>Most script editors have an adjacent blue question mark to open the contextual help. In the related items at the bottom of that help is <strong>About Inferrixstack JavaScript</strong> which contains the most up to date information for what features exist in that version of Inferrixstack. <p/><p>The Script area is where the script to execute is entered. Scripts can be any valid <strong>ECMAScript</strong> that would be written within a function.</p><p>In addition to the ECMAScript context, globally-accessible functions can be defined, such as <strong>max(), min(), avg(), and sum().(These functions are implemented in an modules such as SST Global Scripts.)</strong> To use them, simply call them from your script, for example:<p><p>return max(x.value, y.value, z.value);</p><p>This returns the maximum of the present values of 'x', 'y', and 'z'. Any number of parameters can be provided to any of these global functions.</p><p>Once the script has been entered, click the check mark icon to execute it and attempt to calculate the result.</p><p>Point Value Time ObjectsInferrixstack</p><p> stores its data in Point Value Time objects that contain a value and a time.When accessing internal data from Inferrixstack it is important to know if you are dealing with a raw value or a Point Value Time.</p><p>  { </p><p>   value: value of object,</p>  <p>  time: timestamp in milliseconds since epoch</p><p>}</p><p>Time values </p><p> The timestamp of  value is also available to the script.  The following fields can be useful for conversions:</p> <p>p.time - timestamp of the value in milliseconds since the epochp.</p> <p> millis - 0-999 the millisecond portion of p.time </p><p> p.second - 0-60</p> <p> p.minute - 0-60</p> <p> p.hour - 0-23</p> <p>p.day - 1-28,31</p> <p>p.dayOfWeek - 1-7 where 1 is Sunday </p> <p>p.dayOfYear - 1-365,366</p> <p>p.month - 1-12</p> <p> p.year - four digits</p> <p>Context Objects</p> <p> The script var that represents a point in a script is actually an <strong>'object',</strong> in JavaScript terminology. An object is a container of values and functions that can be referenced by their property names. To get a description of the properties available for use in a script var, use the help property, e.g.: </p> <p>return x.help; </p> <p>This script works best if the data type is set to alphanumeric, but this is not required. The help property is identical to the toString() function, which is available on all context objects (i.e. not just script vars).</p> <p> The value property is the present value of the point. The JavaScript type of the value is analogous to its Inferrixstack type: Binary become boolean, Numeric becomes float, Multistate becomes integer, and Alphanumeric becomes string.</p> <p> Each script var also implements additional functions. The objects returned by these functions depend upon the data type of the point the var refers to. Again, the help property can be used to get a description of the returned object's properties. For the *periodType* parameter in all of the functions below, the following pre-defined global variables can be used: <strong>SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, and YEAR.</strong></p> <p>The ago() function returns the value that the point had the given amount of time ago. For example, the call <strong>'x.ago(HOUR, 3)'</strong> returns the point's value exactly 3 hours ago.</p> <p>The past() function returns an object containing statistics over the given period ending now. See below for a description of the various statistics objects.</p> <p>The prev() and previous() functions are identical; the latter is provided for its linguistic completeness. The functions return the same statistically object as past(), but over a different time span. The start and end times are quantized such that they correspond to the period type. For example, if the period type is HOURLY and periods is 1, and the function runs at 18:05, the time span that will be used is from 17:00 (inclusive) to 18:00 (exclusive). If the periods were, say, 3, the time span would be from 15:00 to 18:00. Similarly, MONTH starts the time span at midnight on the first day of the previous month and ends it on the last day of the previous month (when periods is 1). Other period types work the same. A WEEK starts on Monday at midnight in accordance with ISO standards.</p> <p>The last() function return a list of the latest point value/time objects up to the given limit. The list will  never be null, but could have a size from 0 to n depending on how many historical values there actually are. Values  are sorted from most newest to oldest so that list.get(0) will return the most recent value. The list is a  java.util.List object, and so has all of the methods available in that interface, including get(index) and size().    The get(index) method will throw an ArrayIndexOutOfBoundsException if you ask for an index that is >= the size, so be  sure to check the list size before using get. Point value/time objects have 'value' and 'time' properties. </p> <p> The lastValue() function returns a single point value/time object, or null if the index is invalid. (Size checking   in the list is done automatically, so an ArrayIndexOutOfBoundsException will never be thrown.) lastValue() and  lastValue(0) will return the most recent value, lastValue(1) will return the second-most recent value, etc.</p> <p>The pointValuesBetween(from, to) function return a list of point value/time objects between the given timestamps.   The returned values are inclusive of the from time and exclusive of the end time.    The list will never be null, but could have a size from 0 to n depending on how many historical values there actually are. Values  are sorted in time order so that list.get(0) will return the oldest value. The list is a  java.util.List object, and so has all of the methods available in that interface, including get(index) and size().    The get(index) method will throw an ArrayIndexOutOfBoundsException if you ask for an index that is >= the size, so be  sure to check the list size before using get. Point value/time objects have 'value' and 'time' properties. </p> <p> The pointValuesSince(timestamp) function return a list of point value/time objects since the given timestamp.   The returned values are inclusive of the timestamp.    The list will never be null, but could have a size from 0 to n depending on how many historical values there actually are. Values  are sorted in time order so that list.get(0) will return the oldest value. The list is a  java.util.List object, and so has all of the methods available in that interface, including get(index) and size().    The get(index) method will throw an ArrayIndexOutOfBoundsException if you ask for an index that is >= the size, so be  sure to check the list size before using get. Point value/time objects have 'value' and 'time' properties.</p> <p> The pointValueBefore(timestamp) function returns the nearest point value/time object prior to timestamp, or null if there is not one. </p> <p> The pointValueAfter(timestamp) function returns the nearest point value/time object after to timestamp, or null if there is not one.</p> <p> The pointValueAt(timestamp) function returns the a point value/time object that was recorded exactly at the timestamp, or null if there is not one.</p> <p> Statistical objects</p> <p> Statistics objects are returned from the past(), prev(), and previous(), getStats(from, to) functions. (See 'Context objects' above.) The properties of the object returned depend upon the data type of point upon which they were generated. Time values in objects are stored as integers, but represent the number of milliseconds since midnight Jan 1, 1970. </p> <p><strong>Note 1:</strong> getStats(from, to) operates on timestamps, usage:</p> <p>//Get the stats for the past 20 minutes </p> <p>    var end = new Date(); </p> <p>   var start = new Date(end.getTime() - 1000 * 60 * 20); //20 min before now</p> <p>   var stats = p1.getStats(start.getTime(), end.getTime());</p><p><strong>Note 2:</strong> Statistics are returned as Javascript Objects so Mathematical operations must use the .doubleValue() method.  For example:</p> <p> p1.past(HOUR).minimumValue.doubleValue() +</p> <p> p2.past(HOUR).maximumValue.doubleValue()</p> <p>The AnalogStatistics object is returned by Numeric points. It contains the following properties:</p> <p> minimumValue: (float) the minimum value the point reached over the period</p> <p>minimumTime: (integer) the time at which the minimum value was reached</p> <p>maximumValue: (float) the maximum value the point reached over the period</p> <p>maximumTime: (integer) the time at which the maximum value was reached</p> <p>average: (float) the average value of the point over the period</p> <p>integral: (float) the integral value of the point over the period</p> <p>sum: (float) the sum of all value updates over the period (appropriate for pulse counting)</p> <p>startValue: the value before or exactly at the period start time</p> <p>firstValue: (float) the first value in the period</p> <p>firstTime: (integer) the time of the first value</p> <p>lastValue: (float) the last value in the period</p> <p>lastTime: (integer) the time of the last value<p> <p> count: (integer) the number of updates over the period</p> <p>delta: (float) the cumulative change in value from firstValue to lastValue period</p> <p>StartTime (integer) the start time used for the calculation period</p><p> EndTime (integer) the end time used for the calculation</p> <p> For example, the following returns the minimum value of 'n' over the past hour:n.past(HOUR).minimumValue; </p> <p> The StartsAndRuntimeList object is returned by Binary and Multistate points. It contains the following properties: </p> <p>periodStartTime (integer) the start time used for the calculation</p> <p>periodEndTime (integer) the end time used for the calculation</p> <p>count (integer) count of the total number of entries</p> <p> startValue: the value before or exactly at the period start time</p> <p>firstValue: the first value in the period</p> <p> firstTime: (integer) the time of the first value</p> <p>lastValue: the last value in the period</p> <p>lastTime: (integer) the time of the last value</p> <p>data: (array) the list of individual StartAndRuntime objects.</p> <p> Each StartAndRuntime object has the following properties:</p> <p> value: (boolean for Binary, integer for Multistate) the point state to which the remaining properties apply</p> <p> starts: (integer) the number of times the state was entered over the period</p> <p> runtime: (integer) the amount of time in milliseconds the point was in the state over the period</p> <p>proportion: (float) the proportion of the period the point was in the state (runtime / real duration) </p> <p>percentage: (float) proportion * 100</p> <p>To access a specific StartAndRuntime object in the list, use the get() function. For example, the following returns the proportion of time that 'b' was in state 'false' over the previous 2 months.</p> <p> return b.past(MONTH, 2).get(false).proportion; </p> <p>The ValueChangeCounter object is returned by Alphanumeric points.    It contains a property changes, which is the number of times the point changed during the period.    For example, the following returns the number of times 'a' changed during the previous 45 minutes</p> <p> .b.previous(MINUTE, 45);</p><p> Each ValueChangeCounter has the following properties:</p> <p> periodStartTime (integer) the start time used for the calculation</p> <p> periodEndTime (integer) the end time used for the calculation</p> <p> count (integer) count of the total number of entries</p> <p>  startValue: the value before or exactly at the period start time </p> <p>firstValue: the first value in the period </p><p> firstTime: (integer) the time of the first value</p> <p> lastValue: the last value in the period </p> <p>lastTime: (integer) the time of the last value </p> <p> count: (integer) count of the number of samples </p> <p> changes: (integer) number of unique sample values</p> <p> Global Utilities</p><p> The script context has some utilites that are globally available.</p><p> DateTimeUtility </p> <p>This utility is accessible via DateTimeUtility.{method}.</p>     <p> getOffset(timezoneId, timestamp) timezoneId - 'Europe/Rome' timestamp - ms timestamp of any date return - timezone offset in milliseconds at that point in time</p> <p>getTimezone()return - Timezone from where the script is being run.</p> <p> getUtcOffset(timestamp) </p> <p> timestamp - ms timestamp of any date return - the UTC offset in milliseconds from where the script is being run</p> <p> parseDate(format, dateString, timezoneId)</p><p>format - See here dateString - String date and is related to above timezoneId - Timezone ID to use return - millisecond date</p> <p>formatDate(formate, timestamp, timezoneId)</p><p> format - See here timestamp - milliseconds since epochtimezoneId - timezone to use return - String formatted date </p><p>RuntimeManager</p><p>This utility is accessible via RuntimeManager.{method}. The enable/disable methods return a status of:</p><p>-1 - Does Not Exist</p><p> 0 - No change in state</p><p> 1 - Operation successful</p> <p>Available Methods:</p> <p> refreshDataPoint(xid)</p><p> Refreshing a data point suggests to the Data Source that the point value should be collected ASAP.  This will only happen if the underlying data source has implemented this functionality. xid - Xid for data point returns: </p> <p>-1 - Point does not exist</p> <p> 0 - Point is not enabled</p><p> 1 - Suggestion made to data source</p><p> isDataSourceEnabled(xid)</p><p> xid - Xid for a data source return true if enabled false if not or DNE</p><p> enableDataSource(xid)</p><p> xid - Xid for a data source, return status</p><p> disableDataSource(xid)</p> <p> xid - Xid for a data source, return status </p> <p>isDataPointEnabled(xid)</p> <p> xid - Xid for a data point return true if enabled false if not or DNE or User does not have permissions </p><p><b>Note:</b> a disabled data point is a data point that is not collecting data, which can be due to either the pointbeing disabled or its data source being disabled.</p> <p> enableDataPoint(xid) </p> <p>xid - Xid for a data point, return status </p> <p>disableDataPoint(xid)</p><p> xid - Xid for a data point, return status</p><p> sleep(millisecondsmilliseconds- Milliseconds to sleep the script\s  thread execution for, nothing returned Data Point Queries </p> <p>Data points can be queried by using the DataPoint Query utility.  This utility has one method: DataPointQuery.query(stringRql); </p><p><b>DataPointWrapperThe</b> DataPointWrapper returned has some of the basic information on a data point in addition to the Runtime member which is the same as the Object that wraps the context points for a script.   The following are members of the DataPointWrapper Object:</p><p> extendedName - String </p> <p>settable - Boolean </p><p>deviceName - String </p> <p>enabled - Boolean </p> <p>xid - String </p><p>name - String </p> <p>unit - String </p><p>dataSourceName - String </p> <p>dataSourceXid - String </p><p>runtime - Point Context object </p><p><b>Note:</b> The runtime is the object you would expect to see by adding a point to the script context. This is the objectthat contains the .ago(), .past() and .prev() methods as described above. Use caution as this member is null if the data point is not enabled.RQLRQL is a query language that is highly flexible, more info here. For example to find all points with a name that starts with Volts use this query: like(name, Volts*) Note the use of the asterisk wildcard, this is the default for all Inferrixstack RQL.   Also to see what is available to use in the query go here.</p><p><b> RQL Examples</b> This example will query for a set of the first 10 data points who's names contain the word 'boiler'  and return an average their values.  There is an additional check to ensure that only points that are enabled are used.  Note that this could also be done in the RQL statement.</p><p> var points = DataPointQuery.query('like(name, *boiler*)&limit(10)'); </p> <p>var average = 0.0; </p> <p>LOG.info('Found ' + points.size() + ' points to compute average.');</p><p>for(var i=0; i<points.size(); i++){</p><p>if(points.get(i).runtime !== null){</p><p>LOG.info('Adding ' + points.get(i).runtime.value + ' to the average.');</p><p>average = average + points.get(i).runtime.value;}}</p><p>return average/points.size();</p><p> Data Source Queries </p><p>Data sources can be queried in much the same way. There is one method, DataSourceQuery.query(stringRql); A returned object will contain:</p><p> name - String </p> <p>xid - Stringe</p> <p> nabled - boolean </p><p> type - String </p><p>points - List<DataPointWrapper></p> <p> Point Value Queries </p> <p>While point values and statistics can be gotten through point wrappers, one need use the PointValueQuery utility to easily stream values or collate multiple points' values by time. A second method is provided to optionally roll the data up into rollup periods, and then to pass a part or the whole statistics object to the callback. To see the method signatures, run print(PointValueQuery); from within the scripting environment.</p>";
}
